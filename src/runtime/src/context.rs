// Copyright (c) 2020-2021, UMD Database Group. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! When the lambda function is called for the first time, it deserializes the
//! corresponding execution context from the cloud environment variable.

use super::datasource::DataSource;
use serde::{Deserialize, Serialize};

type PhysicalPlan = String;
type LambdaFunctionName = String;
type GroupSize = u8;

/// Next lambda function call.
#[derive(Debug, Clone, Deserialize, Serialize)]
pub enum LambdaCall {
    /// Next lambda function name with concurrency > 1.
    ///
    /// If the next call type is `Solo`, then the name it contains is the lambda
    /// function.
    Solo(LambdaFunctionName),
    /// Next lambda function name with concurrency = 1. To cope with the speed
    /// and volume of data processed, the system creates a lambda group that
    /// contains multiple lambda function name to a single function code. When
    /// traffic increases dramatically, each query can call a function with
    /// the same code/binary but with different names to avoid delays.
    ///
    /// If the next call type is `Chorus`, then the current lambda will pick one
    /// of function names from the group as the next call according to a certain
    /// filtering strategy.
    ///
    /// The naming rule is:
    /// If the system picks `i` from the collection [0..`GroupSize`], then the
    /// next call is `LambdaFunctionName`-`i`.
    Chorus((LambdaFunctionName, GroupSize)),
    /// There is no subsequent call to the lambda function at the end.
    /// TODO: This function must include data sink operation.
    None,
}

/// Execution environment context for lambda functions.
#[derive(Debug, Deserialize, Serialize)]
pub struct LambdaContext {
    /// JSON formatted string for a specific physical plan.
    pub plan:       PhysicalPlan,
    /// Current lambda function name.
    ///
    ///   +---------------------------------------------+
    ///   |           Lambda Naming Convention          |
    ///   +--------------+----------------+-------------+
    ///   |  query code  -   plan index   -  timestamp  |
    ///   +--------------+----------------+-------------+
    ///
    /// - query code: the cryptographic hash digest of a query produced by
    ///   BLAKE2b ([RFC 7693](https://tools.ietf.org/html/rfc7693)).
    ///
    /// - plan index: the 2-digit number [00-99] indicates the index of the
    ///   subplan of the current query in the dag.
    ///
    /// - timestamp: the time guarantees that the same query can be
    ///   distinguished.
    ///   ISO 8601 date and time format:
    ///   https://www.iso.org/iso-8601-date-and-time-format.html
    ///
    /// The following is the name of the lambda function generated by the query
    /// at a certain moment.
    ///
    /// SX72HzqFz1Qij4bP-00-2021-01-28T19:27:50.298504836Z
    pub name:       String,
    /// Lambda function name(s) for next invocation(s).
    pub next:       LambdaCall,
    /// Data source where data that is being used originates from.
    pub datasource: DataSource,
}
