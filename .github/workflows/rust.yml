name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always
  LAMBDA_NAME: hello step_1 step_2 gen_data
  AWS_LAMBDA_ROLE: ${{ secrets.AWS_LAMBDA_ROLE }}

jobs:
  codestyle:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - uses: actions/checkout@v2
      - run: cargo fmt --all -- --check

  lint:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: clippy
      - uses: actions/checkout@v2
      - run: cargo clippy --all-targets -- -D clippy::all

  compile:
    if: github.ref != 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@v2
      - run: cargo check --all

  test:
    if: github.ref != 'refs/heads/master'
    needs: [codestyle, lint, compile]
    runs-on: ubuntu-latest
    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@v1
    - name: Checkout
      uses: actions/checkout@v2
    - name: Cache cargo and xargo
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.xargo
          target
        key: ${{ runner.os }}-cargo-serverlesscq-${{ hashFiles('**/Cargo.lock') }}
    - name: Test
      run: cargo test

  # deploy on pushes to master branch
  # assumes aws credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
  # are configured in travis settings
  # see https://serverless.com/framework/docs/providers/aws/guide/credentials/
  # for more information
  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache cargo and xargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.xargo
            target
          key: ${{ runner.os }}-cargo-serverlesscq-${{ hashFiles('**/Cargo.lock') }}
      - name: Install nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install xargo
        run: |
          rustup override set nightly
          rustup component add rust-src
          cargo install xargo
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Build
        run: |
          rustup override set nightly
          xargo build --target ${{ matrix.target }} --release
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: AWS lambda package
        run: |
          for f in $LAMBDA_NAME; do
            mv ./target/x86_64-unknown-linux-gnu/release/$f ./bootstrap;
            zip -j $f.zip ./bootstrap;
            GET_FUNCTION_NAME=$(aws lambda list-functions --query \
              "Functions[?FunctionName=='${f}'].FunctionName[]" --output text);
            echo "${GET_FUNCTION_NAME}";
            if [ "${GET_FUNCTION_NAME}" == "${f}" ]; then
              aws lambda update-function-code --function-name $f --zip-file fileb://./$f.zip;
              echo "Congratulations! You've successfully upgraded ServerlessCQ.";
            else
              aws lambda create-function --function-name $f \
                --runtime provided.al2 \
                --role $AWS_LAMBDA_ROLE \
                --handler doesnt.matter \
                --zip-file fileb://./$f.zip \
                --environment Variables={RUST_BACKTRACE=1} \
                --tracing-config Mode=Active;
              echo "Congratulations! You've successfully deployed ServerlessCQ.";
            fi
          done
